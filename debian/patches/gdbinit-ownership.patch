This patch was not popular upstream; there was no fundamental objection, but
several problems with the implementation.  It needs to be revisited.

---
 gdb/cli/cli-cmds.c |   42 +++++++++++++++++++++++++++++++++++++++++-
 gdb/main.c         |    4 ++--
 2 files changed, 43 insertions(+), 3 deletions(-)

Index: gdb-7.2/gdb/cli/cli-cmds.c
===================================================================
--- gdb-7.2.orig/gdb/cli/cli-cmds.c	2010-09-05 10:31:40.000000000 -0400
+++ gdb-7.2/gdb/cli/cli-cmds.c	2010-09-05 11:16:36.000000000 -0400
@@ -54,6 +54,8 @@
 #include "tui/tui.h"		/* For tui_active et.al.   */
 #endif
 
+#include "gdb_stat.h"
+
 #include <fcntl.h>
 
 /* Prototypes for local command functions */
@@ -578,13 +580,47 @@ source_script_with_search (const char *f
 	 If the source command was invoked interactively, throw an error.
 	 Otherwise (e.g. if it was invoked by a script), silently ignore
 	 the error.  */
-      if (from_tty)
+      /* Or, if this was an automatic load during startup, ignore the
+	 error.  */
+      if (from_tty > 0)
 	perror_with_name (file);
       else
 	return;
     }
 
   old_cleanups = make_cleanup (xfree, full_path);
+
+  if (stream == NULL)
+    {
+      if (from_tty)
+	perror_with_name (file);
+      else
+	{
+	  do_cleanups (old_cleanups);
+	  return;
+	}
+    }
+
+#ifdef HAVE_GETUID
+  if (from_tty == -1)
+    {
+      struct stat statbuf;
+      int fd = fileno (stream);
+      if (fstat (fd, &statbuf) < 0)
+	{
+	  make_cleanup_fclose (stream);
+	  perror_with_name (file);
+	}
+      if (statbuf.st_uid != getuid () || (statbuf.st_mode & S_IWOTH))
+	{
+	  warning ("not using untrusted file \"%s\"", file);
+	  fclose (stream);
+	  do_cleanups (old_cleanups);
+	  return;
+	}
+    }
+#endif
+
   source_script_from_stream (stream, file);
   do_cleanups (old_cleanups);
 }
@@ -1381,6 +1417,10 @@ The max call depth for user-defined comm
 }
 
 
+/* Load a GDB command file whose name is given in ARGS.  FROM_TTY may
+   be -1, in which case we are loading a gdbinit file; in that case,
+   be paranoid about unsafe files.  */
+
 void
 init_cli_cmds (void)
 {
Index: gdb-7.2/gdb/main.c
===================================================================
--- gdb-7.2.orig/gdb/main.c	2010-09-05 10:31:40.000000000 -0400
+++ gdb-7.2/gdb/main.c	2010-09-05 10:32:03.000000000 -0400
@@ -794,7 +794,7 @@ Excess command line arguments ignored. (
      debugging or what directory you are in.  */
 
   if (home_gdbinit && !inhibit_gdbinit)
-    catch_command_errors (source_script, home_gdbinit, 0, RETURN_MASK_ALL);
+    catch_command_errors (source_script, home_gdbinit, -1, RETURN_MASK_ALL);
 
   /* Now perform all the actions indicated by the arguments.  */
   if (cdarg != NULL)
@@ -868,7 +868,7 @@ Can't attach to process and specify a co
   /* Read the .gdbinit file in the current directory, *if* it isn't
      the same as the $HOME/.gdbinit file (it should exist, also).  */
   if (local_gdbinit && !inhibit_gdbinit)
-    catch_command_errors (source_script, local_gdbinit, 0, RETURN_MASK_ALL);
+    catch_command_errors (source_script, local_gdbinit, -1, RETURN_MASK_ALL);
 
   /* Now that all .gdbinit's have been read and all -d options have been
      processed, we can read any scripts mentioned in SYMARG.
